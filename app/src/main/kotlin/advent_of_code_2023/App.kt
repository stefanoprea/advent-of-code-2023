/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package advent_of_code_2023

import kotlinx.coroutines.runBlocking
import java.io.File
import io.ktor.client.HttpClient
import io.ktor.client.engine.cio.CIO
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*


class Days {
    companion object {
        fun getInput(day: String) : String {
            downloadInputFileIfNotExists(day)
            return readInputFromFile(day)
        }

        private fun downloadInputFileIfNotExists(filename: String) {
            if (inputFile(filename).exists()) {
                return
            }
            val input = fetchInput(filename)
            inputFile(filename).writeText(input)
        }

        private fun inputFile(name: String) = File("src/input", "$name.txt")

        private fun fetchInput(filename: String) = HttpClient(CIO).use { client ->
            runBlocking {
                val response = client.get("https://adventofcode.com/2023/day/$filename/input") {
                    header("Cookie", readCookie())
                }
                when (response.status.isSuccess()) {
                    false -> throw Exception("Couldn't fetch input from server. Day: $filename Response: $response")
                    true -> response.bodyAsText()
                }
            }
        }

        private fun readCookie() = File("src/cookie", "cookie.txt")
            .readText()

        private fun readInputFromFile(name: String) = inputFile(name).readText()
    }
}

fun main() = Unit